import * as React from 'react'

export default function Exercicio02() {
    // 游눢 exclua essa declara칞칚o de vari치vel e substitua por uma chamada a React.useState()  
    

    // O valor inicial da vari치vel de estado "name" ser치 lido
    // do cookie, caso exista. Se n칚o existir, ser치 uma string 
    // vazia.

    // O estado inicial de uma vari치vel estado 칠 
    // ajustado toda vez que acontece uma atualiza칞칚o
    /*
    const [name, setName] = React.useState(
        window.localStorage.getItem('react-name') || ''
    )
    */
    
    // Usando um "lazy initializer"
    // 칄 executado apenas uma vez, na fase de inicializa칞칚o
    // (mount) do componente.
    // Para isso, no useState(), em vez de passarmos um valor,
    // PASSAMOS UMA FUN칂츾O que retorna um valor
    const [name, setName] = React.useState(
        () => getNameCookie() || ''
    )

    // Vari치vel de estado para contar a quantidade
    // de atualiza칞칫es de estado (e consequentes
    // chamadas o useEffect())
    const [count, setCount] = React.useState(0)

    function getNameCookie(){
        console.log("Getting cookie!")
        return localStorage.getItem("react-name")
    }

    function handleChange(event) {
      // 游냗 Atualize o nome aqui usando event.target.value 
      setName(event.target.value)
    }

    // Esta fun칞칚o ((useEffect()) ser치 chamada ap칩s qualquer atualiza칞칚o
    // do componente

    // Armazenar o valor da vari치vel de estado "name"
    // em um cookie (localStorage)

    /*
      O jook useEffect() aceita dois par칙metros:
      1) Uma fun칞칚o que ser치 executada como efeito colateral
        de uma atualiza칞칚o de estado
      2) Um vetor de depend칡ncias, no qual devem ser 
      especificadas as vari치veis de estado cuja 
      atualiza칞칚o ser치 monitorada para a execu칞칚o da
      fun칞칚o do primeiro par칙metro.
    */
    React.useEffect(() => {
      window.localStorage.setItem('react-name', name)
      // Incrementa a contagem de chamadas a useEffect()
      setCount(count + 1)
    }, [name])

    return (
      <div>  
        <form> 
            <label htmlFor="name">Name: </label>
            <input onChange={handleChange} id="name" />
        </form>
        {name ? <strong>Hello {name}</strong> : 'Please type your name'}
        <div>
          Chamadas a useEffect(): {count}
        </div>
      </div>
    )
}